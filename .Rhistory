dev.off()
dev.off()
load("soybean_cn.rda")
data <- soybean_cn
load("sbCNSwitchedMetrics.rda")
data <- soybean_cn
metrics <- sbCNSwitchedMetrics
# Focus on treatment groups S1 and S2
data <- data[,c(1:7)]
dataSwitched <- data[,c(1,2,3,5,4,6,7)]
colnames(dataSwitched) <- c("ID","S1.1","S1.2","S1.3","S2.1","S2.2","S2.3")
# Boxplot of non-switched data
boxSel = data[,-1] %>% gather(Sample,Count)
boxSel$group = c(rep("S1",nrow(boxSel)/2), rep("S2", nrow(boxSel)/2))
bPlot = ggplot(boxSel, aes(x=Sample, y=Count, fill=group)) + geom_boxplot() + scale_fill_manual(values=c("limegreen","magenta")) + theme(axis.text=element_text(size=12), axis.title=element_text(size=12), legend.position="none")
# Boxplot of switched data
boxSel = dataSwitched[,-1] %>% gather(Sample,Count)
boxSel$group = c(rep("S1",nrow(boxSel)/2), rep("S2", nrow(boxSel)/2))
bPlotSwitched = ggplot(boxSel, aes(x=Sample, y=Count, fill=group)) + geom_boxplot() + scale_fill_manual(values=c("limegreen","magenta")) + theme(axis.text=element_text(size=12), axis.title=element_text(size=12), legend.position="none")
# MDS plot of non-switched data
colors <- c(rep(c("limegreen"), 3), rep(c("magenta"), 3))
ggplot(plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(data[,2:ncol(data)]), xlim=c(-4, 4), ylim=c(-4, 4)))
ggplot(plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", pch=20, xlim=c(-4, 4), ylim=c(-4, 4)))
mdsDat = data[,2:ncol(data)]
ggplot(mdsDat, aes(x,y)) + geom_text(data = mdsDat[c(1:3),], label = rownames(mdsDat[c(1:3),]), nudge_y = 0.35, fontface="bold", color = "royalblue") + geom_text(data = mdsDat[c(4:6),], label = rownames(mdsDat[c(4:6),]), nudge_y = 0.35, fontface="bold", color = "darkorange2") + labs(x = "Dim 1", y = "Dim 2") + theme(text = element_text(size=12))
# MDS plot of switched data
plotMDS(dataSwitched[,2:ncol(dataSwitched)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(dataSwitched[,2:ncol(dataSwitched)]), xlim=c(-4, 4), ylim=c(-4, 4))
plotMDS(dataSwitched[,2:ncol(dataSwitched)], col=colors, xlab="Dim 1", ylab="Dim 2", pch=20, xlim=c(-4, 4), ylim=c(-4, 4))
# Plot all clusters as a grid
do.call("grid.arrange", c(append(plot_clusters, list(plot_filtered)), ncol=ceiling(nC/2)))
grid.arrange(bPlot, bPlotSwitched, plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(data[,2:ncol(data)]), xlim=c(-4, 4), ylim=c(-2, 2.5))
, plotMDS(dataSwitched[,2:ncol(dataSwitched)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(dataSwitched[,2:ncol(dataSwitched)]), xlim=c(-4, 4), ylim=c(-2, 2.5))
, ncol=2)
grid.arrange(bPlot, bPlotSwitched, plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(data[,2:ncol(data)]), xlim=c(-4, 4), ylim=c(-2, 2.5))
, plotMDS(dataSwitched[,2:ncol(dataSwitched)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(dataSwitched[,2:ncol(dataSwitched)]), xlim=c(-4, 4), ylim=c(-2, 2.5))
, ncol=2)
# Plot all clusters as a grid
do.call("grid.arrange", c(append(plot_clusters, list(plot_filtered)), ncol=ceiling(nC/2)))
bPlotSwitched = ggplot(boxSel, aes(x=Sample, y=Count, fill=group)) + geom_boxplot() + scale_fill_manual(values=c("limegreen","magenta")) + theme(axis.text=element_text(size=12), axis.title=element_text(size=12), legend.position="none")
bPlotSwitched
# MDS plot of switched data
plotMDS(dataSwitched[,2:ncol(dataSwitched)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(dataSwitched[,2:ncol(dataSwitched)]), xlim=c(-4, 4), ylim=c(-4, 4))
# Plot all clusters as a grid
do.call("grid.arrange", c(append(plot_clusters, list(plot_filtered)), ncol=ceiling(nC/2)))
dev.off()
dev.off()
load("soybean_cn.rda")
data <- soybean_cn
load("sbCNSwitchedMetrics.rda")
data <- soybean_cn
metrics <- sbCNSwitchedMetrics
# Focus on treatment groups S1 and S2
data <- data[,c(1:7)]
dataSwitched <- data[,c(1,2,3,5,4,6,7)]
colnames(dataSwitched) <- c("ID","S1.1","S1.2","S1.3","S2.1","S2.2","S2.3")
# Boxplot of non-switched data
boxSel = data[,-1] %>% gather(Sample,Count)
boxSel$group = c(rep("S1",nrow(boxSel)/2), rep("S2", nrow(boxSel)/2))
bPlot = ggplot(boxSel, aes(x=Sample, y=Count, fill=group)) + geom_boxplot() + scale_fill_manual(values=c("limegreen","magenta")) + theme(axis.text=element_text(size=12), axis.title=element_text(size=12), legend.position="none")
bPlot
# Boxplot of switched data
boxSel = dataSwitched[,-1] %>% gather(Sample,Count)
boxSel$group = c(rep("S1",nrow(boxSel)/2), rep("S2", nrow(boxSel)/2))
bPlotSwitched = ggplot(boxSel, aes(x=Sample, y=Count, fill=group)) + geom_boxplot() + scale_fill_manual(values=c("limegreen","magenta")) + theme(axis.text=element_text(size=12), axis.title=element_text(size=12), legend.position="none")
bPlotSwitched
grid.arrange(bPlot, bPlotSwitched, plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(data[,2:ncol(data)]), xlim=c(-4, 4), ylim=c(-2, 2.5))
, plotMDS(dataSwitched[,2:ncol(dataSwitched)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(dataSwitched[,2:ncol(dataSwitched)]), xlim=c(-4, 4), ylim=c(-2, 2.5))
, ncol=2)
# MDS plot of non-switched data
colors <- c(rep(c("limegreen"), 3), rep(c("magenta"), 3))
ggplot(plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(data[,2:ncol(data)]), xlim=c(-4, 4), ylim=c(-4, 4)))
ggplot(plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", pch=20, xlim=c(-4, 4), ylim=c(-4, 4)))
mdsDat = data[,2:ncol(data)]
ggplot(mdsDat, aes(x,y)) + geom_text(data = mdsDat[c(1:3),], label = rownames(mdsDat[c(1:3),]), nudge_y = 0.35, fontface="bold", color = "royalblue") + geom_text(data = mdsDat[c(4:6),], label = rownames(mdsDat[c(4:6),]), nudge_y = 0.35, fontface="bold", color = "darkorange2") + labs(x = "Dim 1", y = "Dim 2") + theme(text = element_text(size=12))
# MDS plot of switched data
plotMDS(dataSwitched[,2:ncol(dataSwitched)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(dataSwitched[,2:ncol(dataSwitched)]), xlim=c(-4, 4), ylim=c(-4, 4))
plotMDS(dataSwitched[,2:ncol(dataSwitched)], col=colors, xlab="Dim 1", ylab="Dim 2", pch=20, xlim=c(-4, 4), ylim=c(-4, 4))
# Plot all clusters as a grid
do.call("grid.arrange", c(append(plot_clusters, list(plot_filtered)), ncol=ceiling(nC/2)))
bPlot
bPlotSwitched
plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(data[,2:ncol(data)]), xlim=c(-4, 4), ylim=c(-2, 2.5))
plotMDS(dataSwitched[,2:ncol(dataSwitched)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(dataSwitched[,2:ncol(dataSwitched)]), xlim=c(-4, 4), ylim=c(-2, 2.5))
grid.arrange(bPlot, bPlotSwitched, plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(data[,2:ncol(data)]), xlim=c(-4, 4), ylim=c(-2, 2.5))
, plotMDS(dataSwitched[,2:ncol(dataSwitched)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(dataSwitched[,2:ncol(dataSwitched)]), xlim=c(-4, 4), ylim=c(-2, 2.5))
, ncol=2)
library(bigPint)
library(dplyr)
library(tidyr)
library(ggplot2)
library(limma)
library(gridExtra)
dev.off()
dev.off()
grid.arrange(bPlot, bPlotSwitched, plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(data[,2:ncol(data)]), xlim=c(-4, 4), ylim=c(-2, 2.5))
, plotMDS(dataSwitched[,2:ncol(dataSwitched)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(dataSwitched[,2:ncol(dataSwitched)]), xlim=c(-4, 4), ylim=c(-2, 2.5))
, ncol=2)
dev.off()
dev.off()
grid.arrange(bPlot, bPlotSwitched, plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(data[,2:ncol(data)]), xlim=c(-4, 4), ylim=c(-2, 2.5))
, plotMDS(dataSwitched[,2:ncol(dataSwitched)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(dataSwitched[,2:ncol(dataSwitched)]), xlim=c(-4, 4), ylim=c(-2, 2.5))
, ncol=2)
# Plot all clusters as a grid
do.call("grid.arrange", c(append(plot_clusters, list(plot_filtered)), ncol=ceiling(nC/2)))
dev.off()
dev.off()
rm(list=ls())
data(soybean_cn)
load("sbCNSwitchedMetrics.rda")
load("soybean_cn.rda")
data <- soybean_cn
load("sbCNSwitchedMetrics.rda")
metrics <- sbCNSwitchedMetrics
# Focus on treatment groups S1 and S2
data <- data[,c(1:7)]
data <- data[,c(1,2,3,5,4,6,7)]
colnames(data) <- c("ID","S1.1","S1.2","S1.3","S2.1","S2.2","S2.3")
p = plotScatterStatic(data, option="point", pointSize=0.25, saveFile = FALSE)
p = plotSM(data, option="allPoints", pointSize=0.25, saveFile = FALSE)
# Plot figure
p[["S1_S2"]]
dev.off()
dev.off()
source("functions.R")
data("soybean_ir")
load("soybean_ir.rda")
data <- soybean_ir
load("../Bioinformatics/Pictures/FilterNotSig/soybean_ir_noFilt_metrics.rda")
metrics <- soybean_ir_noFilt_metrics[["N_P"]]
# Filter, normalize, and standardize the data so each gene has mean=0 and stdev=1
res <- filterStandardizeSB(data)
# Fitered data standardized
filts <- res[["filts"]]
# Non-filtered data standardized
datas <- res[["datas"]]
# Hierarchical clustering object
hc <- res[["hc"]]
# Full data standardized
fulls <- rbind(datas, filts)
fulls <- fulls[,c(7,1:6)]
metrics <- list(metrics)
names(metrics) <- "N_P"
nC=4
colList = scales::hue_pal()(nC+1)
colList <- colList[c(3, 2, 5, 1)]
plotClusters(fulls, metrics, nC=nC, colList=colList)
rm(list=ls())
data(soybean_cn)
data(soybean_cn_metrics)
load("soybean_cn.rda")
data <- soybean_cn
load("soybean_cn_metrics.rda")
metrics <- soybean_cn_metrics
# Focus on treatment groups S1 and S2
data <- data[,c(1:7)]
metricList = list()
metricList[["S1_S2"]] = metrics[["S1_S2"]]
p1 = plotDEG(data, metricList, option="scatterPoints", threshVar="FDR", threshVal=0.05, pointSize=0.1)
p2 = plotDEG(data, metricList, option="parallelCoord", threshVar="FDR", threshVal=0.05, lineSize = 0.1)
p1 = plotSM(data, metricList, option="allPoints", threshVar="FDR", threshVal=0.05, pointSize=0.1, saveFile = FALSE)
p2 = plotSM(data, metricList, option="parallelCoord", threshVar="FDR", threshVal=0.05, pointSize=0.1, saveFile = FALSE)
p2 = plotPCP(data, metricList, threshVar="FDR", threshVal=0.05, lineSize=0.1, saveFile = FALSE)
plot1 <- ggmatrix_gtable(p1[["S1_S2"]])
plot2 <- p2[["S1_S2"]] + theme(axis.text=element_text(size=10), axis.title =element_text(size=10))
plot_grid(plot1, plot2, nrow = 2, rel_heights = c(0.7, 0.3), labels = c("A", "B"), label_size = 9)
dev.off()
dev.off()
# Create dataset
time=c(rep("30", 2), rep("60", 2), rep("120", 2))
Expression=rep(c("Induced", "Repressed") , 3)
value=c(52, 43, 1421, 1682, 57, 4)
data=data.frame(time,Expression,value)
levels(data$time) <- c("30", "60", "120")
# Plot
ggplot(data, aes(fill=Expression, y=value, x=time)) + geom_bar(position="dodge", stat="identity") + geom_text(aes(label=value), size=3, position=position_dodge(width=0.9), vjust=-0.25) + xlab("Minutes after onset of iron stress") + ylab("Number of DEGs")
dev.off()
library(devtools)
library(EDASeq)
library(DESeq)
library(RCurl)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(GGally)
library(bigPint)
library(gridExtra)
library(cowplot)
install_github("drisso/yeastRNASeqRisso2011")
library(yeastRNASeqRisso2011)
source("functions.R")
# Read in three .rda files
githubURL <- "https://github.com/drisso/yeastRNASeqRisso2011/blob/master/data/"
load(url(paste0(githubURL, "geneLevelCounts.rda?raw=true")))
load(url(paste0(githubURL, "laneInfo.rda?raw=true")))
load(url(paste0(githubURL, "geneInfo.rda?raw=true")))
# Prepare data frame based on parameters from .rda files
data(yeastGC)
colnames(laneInfo)[2] <- "conditions"
means <- rowMeans(geneLevelCounts)
filter <- means >= 10
geneLevelCounts <- geneLevelCounts[filter,]
sub <- intersect(rownames(geneLevelCounts), names(yeastGC))
mat <- as.matrix(geneLevelCounts[sub, ])
data <- newSeqExpressionSet(mat, phenoData=laneInfo, featureData=AnnotatedDataFrame(data.frame(gc=yeastGC[sub])))
# Run within and between normalization on data frame
dataWithin <- withinLaneNormalization(data, "gc", which="full", offset=FALSE)
dataNorm <- betweenLaneNormalization(dataWithin, which="median")
counts <- as(dataWithin,"CountDataSet")
dataWithin <- as.data.frame(counts@assayData$counts)
counts <- as(dataNorm,"CountDataSet")
dataBetween <- as.data.frame(counts@assayData$counts)
dataWithin <- formatYeastDF(dataWithin)
dataWithin <- select(dataWithin, ID, Y1.1, Y1.2, Y4.1, Y4.2)
dataBetween <- formatYeastDF(dataBetween)
dataBetween <- select(dataBetween, ID, Y1.1, Y1.2, Y4.1, Y4.2)
# Use bigPint function to create scatterplot matrices showing within and between normalization
retWithin <- plotSM(dataWithin, option="allPoints", pointSize = 0.1, saveFile = FALSE)
retWithin <- retWithin[["Y1_Y4"]] + theme_gray()
retBetween <- plotSM(dataBetween, option="allPoints", pointSize = 0.1, saveFile = FALSE)
retBetween <- retBetween[["Y1_Y4"]] + theme_gray()
# Arrange two scatterplot matrices into grid
plot1 <- plot_grid(ggmatrix_gtable(retWithin), labels=c("A"), ncol = 1, nrow = 1, label_size=12) + theme(plot.background = element_rect(size=0.1,linetype="solid",color="black"))
plot2 <- plot_grid(ggmatrix_gtable(retBetween), labels=c("B"), ncol = 1, nrow = 1, label_size=12) + theme(plot.background = element_rect(size=0.1,linetype="solid",color="black"))
grid.arrange(plot1, plot2, ncol=2)
dev.off()
dev.off()
rm(list=ls())
source("functions.R")
set.seed(50)
boxPlots <- vector('list', 2)
pcpPlots <- vector('list', 2)
mdsPlots <- vector('list', 2)
# In the first case, we purposely create individual observations that will be inconsistent across their replications
A.1=c(rnorm(25,10),rnorm(25,6))
A.2=c(rnorm(25,10),rnorm(25,6))
A.3=c(rnorm(25,10),rnorm(25,6))
B.1=c(rnorm(25,6),rnorm(25,10))
B.2=c(rnorm(25,6),rnorm(25,10))
B.3=c(rnorm(25,6),rnorm(25,10))
makePlots(A.1, A.2, A.3, B.1, B.2, B.3, 1)
# In the second case, we purposely create individual observations that will be more consistent across their replications
A.1=c(rnorm(50,8))
A.2=c(rnorm(50,8))
A.3=c(rnorm(50,8))
B.1=c(rnorm(50,8))
B.2=c(rnorm(50,8))
B.3=c(rnorm(50,8))
makePlots(A.1, A.2, A.3, B.1, B.2, B.3, 2)
# Arrange all six plots into grid
plot1 <- plot_grid(boxPlots[[1]], mdsPlots[[1]], pcpPlots[[1]], labels=c("A", "B", "C"), ncol = 1, nrow = 3, label_size=12) + theme(plot.background = element_rect(size=0.1,linetype="solid",color="black"))
plot2 <- plot_grid(boxPlots[[2]], mdsPlots[[2]], pcpPlots[[2]], labels=c("A", "B", "C"), ncol = 1, nrow = 3, label_size=12) + theme(plot.background = element_rect(size=0.1,linetype="solid",color="black"))
grid.arrange(plot1, plot2, ncol=2)
dev.off()
dev.off()
data(soybean_ir)
soybean_ir <- soybean_ir
load("soybean_ir.rda")
ls()
rm(list=ls())
dev.off()
load("soybean_ir.rda")
ls()
soybean_ir[,-1] <- log(soybean_ir[,-1]+1)
ret = plotSM(soybean_ir, option ="allPoints", saveFile = FALSE, pointSize = 0.1)
ret[["N_P"]] + theme_gray()
ls()
dev.off()
rm(list=ls())
source("functions.R")
load("soybean_ir.rda")
data <- soybean_ir
load("../Bioinformatics/Pictures/FilterNotSig/soybean_ir_noFilt_metrics.rda")
metrics <- soybean_ir_noFilt_metrics[["N_P"]]
# Filter, normalize, and standardize the data so each gene has mean=0 and stdev=1
res <- filterStandardizeSB(data)
# Fitered data standardized
filts <- res[["filts"]]
# Non-filtered data standardized
datas <- res[["datas"]]
# Hierarchical clustering object
hc <- res[["hc"]]
# Full data standardized
fulls <- rbind(datas, filts)
fulls <- fulls[,c(7,1:6)]
metrics <- list(metrics)
names(metrics) <- "N_P"
nC=4
colList = scales::hue_pal()(nC+1)
colList <- colList[c(3, 2, 5, 1)]
ret <- plotClusters(data=fulls, dataMetrics=geneList, clusterAllData = FALSE, yAxisLabel = "Standardized count", colList = colList, saveFile = FALSE, vxAxis = TRUE, lineAlpha = 1, lineSize = 0.3)
ret <- plotClusters(data=fulls, dataMetrics=metrics, clusterAllData = FALSE, yAxisLabel = "Standardized count", colList = colList, saveFile = FALSE, vxAxis = TRUE, lineAlpha = 1, lineSize = 0.3)
plot(ret[["N_V_4"]])
ret[["N_V_4"]]
str(ret)
plot(ret[["N_P_4"]])
ret <- plotClusters(data=fulls, dataMetrics=metrics, clusterAllData = TRUE, yAxisLabel = "Standardized count", colList = colList, saveFile = FALSE, vxAxis = TRUE, lineAlpha = 1, lineSize = 0.3)
str(fulls)
ret <- plotClusters(data=fulls, dataMetrics=metrics, clusterAllData = FALSE, yAxisLabel = "Standardized count", colList = colList, saveFile = FALSE, vxAxis = TRUE, lineAlpha = 1, lineSize = 0.3)
dev.off()
dev.off()
plot(ret[["N_P_4"]])
plotClusters(fulls, metrics, nC=nC, colList=colList)
head(metrics)
geneList = metrics["N_P"][which(metrics["N_P"]$FDR < 0.05), ID]
geneList = metrics["N_P"][which(metrics["N_P"]$FDR < 0.05), ]$ID
metricUnList = metrics["N_P"]
geneList = metricUnList[which(metricUnList$FDR < 0.05), ]$ID
which(metricUnList$FDR < 0.05)
metricUnList$FDR
metricUnList = metrics[["N_P"]]
geneList = metricUnList[which(metricUnList$FDR < 0.05), ]$ID
str(geneList)
ret <- plotClusters(data=fulls, geneList = geneList, clusterAllData = TRUE, yAxisLabel = "Standardized count", colList = colList, saveFile = FALSE, vxAxis = TRUE, lineAlpha = 1, lineSize = 0.3)
str(geneList)
head(fulls)
str(fulls)
fulls$ID %in% geneList
fulls[fulls$ID %in% geneList,]
ret <- plotClusters(data=fullGL, geneList = geneList, clusterAllData = TRUE, yAxisLabel = "Standardized count", colList = colList, saveFile = FALSE, vxAxis = TRUE, lineAlpha = 1, lineSize = 0.3)
fullGL = fulls[fulls$ID %in% geneList,]
ret <- plotClusters(data=fullGL, geneList = geneList, clusterAllData = TRUE, yAxisLabel = "Standardized count", colList = colList, saveFile = FALSE, vxAxis = TRUE, lineAlpha = 1, lineSize = 0.3)
str(ret)
plot(ret[["N_P_4"]])
ret <- plotClusters(data=datas, geneList = geneList, clusterAllData = TRUE, yAxisLabel = "Standardized count", colList = colList, saveFile = FALSE, vxAxis = TRUE, lineAlpha = 1, lineSize = 0.3)
plot(ret[["N_P_4"]])
dev.off()
dev.off()
rm(list=ls())
source("functions.R")
load("soybean_ir.rda")
data <- soybean_ir
load("../Bioinformatics/Pictures/FilterNotSig/soybean_ir_noFilt_metrics.rda")
metrics <- soybean_ir_noFilt_metrics[["N_P"]]
# Filter, normalize, and standardize the data so each gene has mean=0 and stdev=1
res <- filterStandardizeSB(data)
# Fitered data standardized
filts <- res[["filts"]]
# Non-filtered data standardized
datas <- res[["datas"]]
# Hierarchical clustering object
hc <- res[["hc"]]
# Full data standardized
fulls <- rbind(datas, filts)
fulls <- fulls[,c(7,1:6)]
metrics <- list(metrics)
names(metrics) <- "N_P"
nC=4
colList = scales::hue_pal()(nC+1)
colList <- colList[c(3, 2, 5, 1)]
plotClusters(fulls, metrics, nC=nC, colList=colList)
ret <- plotClusters(data=fulls, dataMetrics=metrics, clusterAllData = FALSE, yAxisLabel = "Standardized count", colList = colList, saveFile = FALSE, vxAxis = TRUE, lineAlpha = 1, lineSize = 0.3)
plot(ret[["N_P_4"]])
dev.off()
dev.off()
metricUnList = metrics[["N_P"]]
geneList = metricUnList[which(metricUnList$FDR < 0.05), ]$ID
fullGL = fulls[fulls$ID %in% geneList,]
ret <- plotClusters(data=datas, geneList = geneList, clusterAllData = TRUE, yAxisLabel = "Standardized count", colList = colList, saveFile = FALSE, vxAxis = TRUE, lineAlpha = 1, lineSize = 0.3)
plot(ret[["N_P_4"]])
dev.off()
dev.off()
rm(list=ls())
library(bigPint)
library(dplyr)
library(tidyr)
library(ggplot2)
library(limma)
library(gridExtra)
load("soybean_cn.rda")
data <- soybean_cn
load("sbCNSwitchedMetrics.rda")
data <- soybean_cn
metrics <- sbCNSwitchedMetrics
# Focus on treatment groups S1 and S2
data <- data[,c(1:7)]
dataSwitched <- data[,c(1,2,3,5,4,6,7)]
colnames(dataSwitched) <- c("ID","S1.1","S1.2","S1.3","S2.1","S2.2","S2.3")
# Boxplot of non-switched data
boxSel = data[,-1] %>% gather(Sample,Count)
boxSel$group = c(rep("S1",nrow(boxSel)/2), rep("S2", nrow(boxSel)/2))
bPlot = ggplot(boxSel, aes(x=Sample, y=Count, fill=group)) + geom_boxplot() + scale_fill_manual(values=c("limegreen","magenta")) + theme(axis.text=element_text(size=12), axis.title=element_text(size=12), legend.position="none")
# Boxplot of switched data
boxSel = dataSwitched[,-1] %>% gather(Sample,Count)
boxSel$group = c(rep("S1",nrow(boxSel)/2), rep("S2", nrow(boxSel)/2))
bPlotSwitched = ggplot(boxSel, aes(x=Sample, y=Count, fill=group)) + geom_boxplot() + scale_fill_manual(values=c("limegreen","magenta")) + theme(axis.text=element_text(size=12), axis.title=element_text(size=12), legend.position="none")
# MDS plot of non-switched data
colors <- c(rep(c("limegreen"), 3), rep(c("magenta"), 3))
ggplot(plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(data[,2:ncol(data)]), xlim=c(-4, 4), ylim=c(-4, 4)))
ggplot(plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", pch=20, xlim=c(-4, 4), ylim=c(-4, 4)))
mdsDat = data[,2:ncol(data)]
ggplot(mdsDat, aes(x,y)) + geom_text(data = mdsDat[c(1:3),], label = rownames(mdsDat[c(1:3),]), nudge_y = 0.35, fontface="bold", color = "royalblue") + geom_text(data = mdsDat[c(4:6),], label = rownames(mdsDat[c(4:6),]), nudge_y = 0.35, fontface="bold", color = "darkorange2") + labs(x = "Dim 1", y = "Dim 2") + theme(text = element_text(size=12))
# MDS plot of switched data
plotMDS(dataSwitched[,2:ncol(dataSwitched)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(dataSwitched[,2:ncol(dataSwitched)]), xlim=c(-4, 4), ylim=c(-4, 4))
plotMDS(dataSwitched[,2:ncol(dataSwitched)], col=colors, xlab="Dim 1", ylab="Dim 2", pch=20, xlim=c(-4, 4), ylim=c(-4, 4))
ggplot(plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(data[,2:ncol(data)]), xlim=c(-4, 4), ylim=c(-4, 4)))
ggplot(plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", pch=20, xlim=c(-4, 4), ylim=c(-4, 4)))
dev.off()
grid.arrange(bPlot, bPlotSwitched, ncol=2)
dev.off()
dev.off()
grid.arrange(bPlot, bPlotSwitched, ggplot(plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(data[,2:ncol(data)]), xlim=c(-4, 4), ylim=c(-2, 2.5)))
, ggplot(plotMDS(dataSwitched[,2:ncol(dataSwitched)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(dataSwitched[,2:ncol(dataSwitched)]), xlim=c(-4, 4), ylim=c(-2, 2.5)))
, ncol=2)
p1 = ggplot(plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(data[,2:ncol(data)]), xlim=c(-4, 4), ylim=c(-2, 2.5)))
p1 = ggplot(plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(data[,2:ncol(data)]), xlim=c(-4, 4), ylim=c(-4, 4)))
ggplot(plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(data[,2:ncol(data)]), xlim=c(-4, 4), ylim=c(-4, 4)))
ggplot(plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(data[,2:ncol(data)]), xlim=c(-4, 4), ylim=c(-4, 4)))
dev.off()
rm(list=ls())
load("soybean_cn.rda")
data <- soybean_cn
load("sbCNSwitchedMetrics.rda")
data <- soybean_cn
metrics <- sbCNSwitchedMetrics
# Focus on treatment groups S1 and S2
data <- data[,c(1:7)]
dataSwitched <- data[,c(1,2,3,5,4,6,7)]
colnames(dataSwitched) <- c("ID","S1.1","S1.2","S1.3","S2.1","S2.2","S2.3")
# Boxplot of non-switched data
boxSel = data[,-1] %>% gather(Sample,Count)
boxSel$group = c(rep("S1",nrow(boxSel)/2), rep("S2", nrow(boxSel)/2))
bPlot = ggplot(boxSel, aes(x=Sample, y=Count, fill=group)) + geom_boxplot() + scale_fill_manual(values=c("limegreen","magenta")) + theme(axis.text=element_text(size=12), axis.title=element_text(size=12), legend.position="none")
# Boxplot of switched data
boxSel = dataSwitched[,-1] %>% gather(Sample,Count)
boxSel$group = c(rep("S1",nrow(boxSel)/2), rep("S2", nrow(boxSel)/2))
bPlotSwitched = ggplot(boxSel, aes(x=Sample, y=Count, fill=group)) + geom_boxplot() + scale_fill_manual(values=c("limegreen","magenta")) + theme(axis.text=element_text(size=12), axis.title=element_text(size=12), legend.position="none")
# MDS plot of non-switched data
colors <- c(rep(c("limegreen"), 3), rep(c("magenta"), 3))
ggplot(plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(data[,2:ncol(data)]), xlim=c(-4, 4), ylim=c(-4, 4)))
str(data)
str(data[,2:ncol(data)])
plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(data[,2:ncol(data)]), xlim=c(-4, 4), ylim=c(-4, 4))
p1 = plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(data[,2:ncol(data)]), xlim=c(-4, 4), ylim=c(-4, 4))
p2 = plotMDS(dataSwitched[,2:ncol(dataSwitched)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(dataSwitched[,2:ncol(dataSwitched)]), xlim=c(-4, 4), ylim=c(-4, 4))
dev.off()
p1
plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(data[,2:ncol(data)]), xlim=c(-4, 4), ylim=c(-4, 4))
str(p1)
str(bPlot)
dev.off()
rm(list=ls())
load("soybean_cn.rda")
data <- soybean_cn
load("sbCNSwitchedMetrics.rda")
data <- soybean_cn
metrics <- sbCNSwitchedMetrics
# Focus on treatment groups S1 and S2
data <- data[,c(1:7)]
dataSwitched <- data[,c(1,2,3,5,4,6,7)]
colnames(dataSwitched) <- c("ID","S1.1","S1.2","S1.3","S2.1","S2.2","S2.3")
# 1. Boxplot of non-switched data
boxSel = data[,-1] %>% gather(Sample,Count)
boxSel$group = c(rep("S1",nrow(boxSel)/2), rep("S2", nrow(boxSel)/2))
bPlot = ggplot(boxSel, aes(x=Sample, y=Count, fill=group)) + geom_boxplot() + scale_fill_manual(values=c("limegreen","magenta")) + theme(axis.text=element_text(size=12), axis.title=element_text(size=12), legend.position="none")
ggplot(boxSel, aes(x=Sample, y=Count, fill=group)) + geom_boxplot() + scale_fill_manual(values=c("limegreen","magenta")) + theme(axis.text=element_text(size=12), axis.title=element_text(size=12), legend.position="none")
# 2. Boxplot of switched data
boxSel = dataSwitched[,-1] %>% gather(Sample,Count)
boxSel$group = c(rep("S1",nrow(boxSel)/2), rep("S2", nrow(boxSel)/2))
ggplot(boxSel, aes(x=Sample, y=Count, fill=group)) + geom_boxplot() + scale_fill_manual(values=c("limegreen","magenta")) + theme(axis.text=element_text(size=12), axis.title=element_text(size=12), legend.position="none")
# 3. MDS plot of non-switched data
colors <- c(rep(c("limegreen"), 3), rep(c("magenta"), 3))
ggplot(plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(data[,2:ncol(data)]), xlim=c(-4, 4), ylim=c(-4, 4)))
plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(data[,2:ncol(data)]), xlim=c(-4, 4), ylim=c(-4, 4))
dev.off()
plotMDS(data[,2:ncol(data)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(data[,2:ncol(data)]), xlim=c(-4, 4), ylim=c(-4, 4))
# 4. MDS plot of switched data
plotMDS(dataSwitched[,2:ncol(dataSwitched)], col=colors, xlab="Dim 1", ylab="Dim 2", labels=colnames(dataSwitched[,2:ncol(dataSwitched)]), xlim=c(-4, 4), ylim=c(-4, 4))
dev.off()
dev.off()
load("soybean_ir.rda")
dat <- soybean_ir
dat <- dat[,1:7]
dat[,-1] <- log(dat[,-1]+1)
datCol <- colnames(dat)[-which(colnames(dat) %in% "ID")]
myPairs <- unique(sapply(datCol, function(x) unlist(strsplit(x,"[.]"))[1]))
load("cluster1_metrics.rda")
load("cluster1_metrics.rda")
load("cluster1_metrics.rda")
myMetrics <- colnames(metrics[[1]])[-which(colnames(metrics[[1]]) %in% "ID")]
str(myMetrics)
ls()
rm(list=ls())
load("cluster1_metrics.rda")
ls()
load("soybean_ir.rda")
dat <- soybean_ir
dat <- dat[,1:7]
dat[,-1] <- log(dat[,-1]+1)
datCol <- colnames(dat)[-which(colnames(dat) %in% "ID")]
myPairs <- unique(sapply(datCol, function(x) unlist(strsplit(x,"[.]"))[1]))
load("cluster1_metrics.rda")
str(metrics)
geneList = metrics["N_P"]$ID
geneList
geneList = metrics[["N_P"]]$ID
str(geneList)
plotLitre(data=dat, geneList = tenSigGenes)
plotLitreApp(data=dat, geneList = geneList)
str(dat)
str(geneList)
dev.off()
plotLitreApp(data=dat, geneList = geneList)
app <- plotLitreApp(data = dat, geneList = geneList)
if (interactive()) {
shiny::runApp(app, port = 1234, launch.browser = TRUE)
}
app <- plotLitreApp(data = dat, geneList = geneList)
app <- plotLitreApp(data = dat, geneList = geneList)
app <- plotLitreApp(data = dat, geneList = geneList)
ls()
app <- plotLitreApp(data = dat, geneList = metrics)
